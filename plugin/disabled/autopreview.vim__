if exists("loaded_autopreview")
    finish
else
    let loaded_autopreview = 1
endif

let g:auto_preview_word_enabled = 0
let g:cur_preview_word = ""

function s:AutoPreview()
	let l:ptag_error = 0
	if g:auto_preview_word_enabled == 0
		return
	endif

	if &previewwindow			" don't do this in the preview window
		return
	endif

	if &filetype == 'help'
		return
	endif

	let w = expand("<cword>")		" get the word under cursor
	if w =~ '\a'			" if the word contains a letter
		if w == g:cur_preview_word
			return
		endif

		let l:cur_winnr = winnr()

		silent! wincmd P			" jump to preview window
		if &previewwindow			" if we really get there...
			match none			" delete existing highlight
			wincmd p			" back to old window
		endif

		" Try displaying a matching tag for the word under the cursor
		try
			exe "belowright ptag! " . w
		catch
			let l:ptag_error = 1
		endtry

		silent! wincmd P		" jump to preview window
		if &previewwindow		" if we really get there...
			if has("folding")
				silent! .foldopen		" don't want a closed fold
			endif
			" call search("$", "b")		" to end of previous line
			" let w = substitute(w, '\\', '\\\\', "")
			" call search('\<\V' . w . '\>')	" position cursor on match
			normal zt
			normal 2k2j
			call HighlightWord(w)
		endif
		exec l:cur_winnr . "wincmd w"
		let g:cur_preview_word = w
	endif
endfunction

function AutoPreview_Toggle()
	if g:auto_preview_word_enabled == 0
		let g:auto_preview_word_enabled = 1
		silent! call b:AutoPreviewWord()
		echo "Auto Preview Word ON"
	else
		let g:auto_preview_word_enabled = 0
		match none
		echo "Auto Preview Word OFF"
	endif
endfunction

autocmd CursorHold * nested silent! call s:AutoPreview()
" autocmd CursorHold * nested call s:AutoPreview()
