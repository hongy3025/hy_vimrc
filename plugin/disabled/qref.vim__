if !exists("g:qref_hotkey") || g:qref_hotkey == ""
	let g:qref_hotkey = ",1"
endif

exe "nnoremap <unique>" g:qref_hotkey ":cal <SID>init(1)<cr>:cal QRefRun()<cr>"
exe "cnoremap <unique>" g:qref_hotkey "<Esc>"

if exists("g:qref_loaded") && g:qref_loaded
	finish
endif
let g:qref_loaded = 1

let s:action2cmd = {"z": 'normal #G'}

function s:QRefOpen()
	call s:init(1)
	call QRefRun()
endfunc

function s:buildlist()
	redir @y 
   	silent normal [I
   	redir END

	"================================================================================
	" output of normal [I like this:
	" qref.vim
	"   1:    1 if !exists("g:qref_hotkey") || g:qref_hotkey == ""
	"   2:    8 if exists("g:qref_loaded") && g:qref_loaded
	"   3:   35         " if l:theline[3] == "u" && (l:theline[6] != "-" || l:theline[5] != " ")
	"   4:   42             " if l:bufnum == bufnr('')
	"   5:   63     if !exists("s:cursel") || (s:cursel >= s:blen) || (s:cursel < 0)
	"   6:   67     if s:blen < 1
	"   7:   73         if l:idx != s:cursel
	"   8:   81     if l:pkey =~ "j$"
	"   9:   84         if s:cursel == 0
	"  10:   97     if a:onStart
	"  11:  127     if a:cmd != "" && a:cmd =~ '^ *\d*!\?\a\?$'
	"  12:  129         if l:bufidx == -1
	"  13:  134         if l:action == "" || l:action == "!"
	"  14:  138         if l:bufidx >= 0 && l:bufidx < s:blen && has_key(s:action2cmd, l:action)
	"  15:  141                 if l:action[-1:] != "z"
	"  16:  146                 if l:action[-1:] != "z"
	"  17:  156     if a:height > &lines - winnr('$') * (&winminheight+1) - 1
	"  18:  165     if bufwinnr(a:bno) == -1ndfunc
	"================================================================================

	let s:buflist = []
	let s:blen = 0

	for l:theline in split(@y,"\n")
		if l:theline =~ '^\s*\d\+:\s\+\d\+\s\+.*'
			call add(s:buflist, l:theline)
			let s:blen += 1
		endif
	endfor
endfunc

function QRefRun()
	if !exists("s:cursel") || (s:cursel >= s:blen) || (s:cursel < 0)
		let s:cursel = 0
	endif

	if s:blen < 1
		echoh WarningMsg | echo "No symbol at this cursor!" | echoh None
		call s:init(0)
		return
	endif
	for l:idx in range(s:blen)
		if l:idx != s:cursel
			echo "  " . s:buflist[l:idx]
		else
			echoh DiffText | echo "> " . s:buflist[l:idx] | echoh None
		endif
	endfor

	let l:pkey = input("Jump to reference:", " ")
	if l:pkey =~ "j$"
		let s:cursel = (s:cursel+1) % s:blen
	elseif l:pkey =~ "k$"
		if s:cursel == 0
			let s:cursel = s:blen - 1
		else
			let s:cursel -= 1
		endif
	elseif s:update_buf(l:pkey)
		call s:init(0)
		return
	endif
	call s:setcmdh(s:blen+1)
endfunc

function s:init(onStart)
	if a:onStart
		set nolazyredraw
		let s:cursorbg = synIDattr(hlID("Cursor"),"bg")
		let s:cursorfg = synIDattr(hlID("Cursor"),"fg")
		let s:cmdh = &cmdheight
		hi Cursor guibg=NONE guifg=NONE

		let s:klist = ["j", "k", "u", "d", "w", "l", "s", "v"]
		for l:key in s:klist
			exe "cnoremap ".l:key." ".l:key."<cr>:cal QRefRun()<cr>"
		endfor
		cmap <up> k
		cmap <down> j

		call s:buildlist()
		let s:cursel = match(s:buflist, '^\d*\*')
		call s:setcmdh(s:blen+1)
	else
		call s:setcmdh(s:cmdh)
		for l:key in s:klist
			exe "cunmap ".l:key
		endfor
		cunmap <up>
		cunmap <down>
		exe "hi Cursor guibg=" . s:cursorbg . " guifg=".((s:cursorfg == "") ? "NONE" : s:cursorfg)
	endif
endfunc

" return true to indicate termination
function s:update_buf(cmd)
	if a:cmd != "" && a:cmd =~ '^ *\d*!\?\a\?$'
		let l:bufidx = str2nr(a:cmd) - 1
		if l:bufidx == -1
			let l:bufidx = s:cursel
		endif

		let l:action = matchstr(a:cmd, '!\?\a\?$')
		if l:action == "" || l:action == "!"
			let l:action .= "z"
		endif

		if l:bufidx >= 0 && l:bufidx < s:blen && has_key(s:action2cmd, l:action)
			try
				" echo substitute(s:buflist[l:bufidx],'^\s*\d\+:\s\+\(\d\+\)\s\+.*','\1',"")
				exe substitute(s:action2cmd[l:action], "#", substitute(s:buflist[l:bufidx],'^\s*\d\+:\s\+\(\d\+\)\s\+.*', '\1',""),"")
				if l:action[-1:] != "z"
					call s:buildlist()
				endif
			catch
				echoh ErrorMsg | echo "\rVIM" matchstr(v:exception, '^Vim(\a*):\zs.*') | echoh None
				if l:action[-1:] != "z"
					call inputsave() | call getchar() | call inputrestore()
				endif
			endtry
		endif
	endif
	return index(s:klist, a:cmd[-1:]) == -1
endfunc

function s:setcmdh(height)
	if a:height > &lines - winnr('$') * (&winminheight+1) - 1
		call s:init(0)
		echo "\r"|echoerr "QRef E1: No room to display buffer list"
	else
		exe "set cmdheight=".a:height
	endif
endfunc

function s:switchbuf(bno, mod)
	if bufwinnr(a:bno) == -1
		exe "b".a:mod a:bno
	else
		exe bufwinnr(a:bno) . "winc w"
	endif
endfunc

function s:qrefdcmd(bno, mod)
	exe "bd" . a:mod a:bno
endfunc
